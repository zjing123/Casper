(function (d) {
    var c = function (g) {
        var f = new c.Index;
        f.pipeline.add(c.trimmer, c.stopWordFilter, c.stemmer);
        if (g) {
            g.call(f, f)
        }
        return f
    };
    c.version = "0.5.3";
    c.utils = {};
    c.utils.warn = function (f) {
        return function (g) {
            if (f.console && console.warn) {
                console.warn(g)
            }
        }
    }(this);
    c.EventEmitter = function () {
        this.events = {}
    };
    c.EventEmitter.prototype.addListener = function () {
        var f = Array.prototype.slice.call(arguments), g = f.pop(), h = f;
        if (typeof g !== "function") {
            throw new TypeError("last argument must be a function")
        }
        h.forEach(function (i) {
            if (!this.hasHandler(i)) {
                this.events[i] = []
            }
            this.events[i].push(g)
        }, this)
    };
    c.EventEmitter.prototype.removeListener = function (g, h) {
        if (!this.hasHandler(g)) {
            return
        }
        var f = this.events[g].indexOf(h);
        this.events[g].splice(f, 1);
        if (!this.events[g].length) {
            delete this.events[g]
        }
    };
    c.EventEmitter.prototype.emit = function (g) {
        if (!this.hasHandler(g)) {
            return
        }
        var f = Array.prototype.slice.call(arguments, 1);
        this.events[g].forEach(function (h) {
            h.apply(undefined, f)
        })
    };
    c.EventEmitter.prototype.hasHandler = function (f) {
        return f in this.events
    };
    c.tokenizer = function (h) {
        if (!arguments.length || h == null || h == undefined) {
            return []
        }
        if (Array.isArray(h)) {
            return h.map(function (i) {
                return i.toLowerCase()
            })
        }
        var j = h.toString().replace(/^\s+/, "");
        for (var g = j.length - 1; g >= 0; g--) {
            if (/\S/.test(j.charAt(g))) {
                j = j.substring(0, g + 1);
                break
            }
        }
        var f = j.split(/[\ |\~|\`|\!|\@|\#|\$|\%|\^|\&|\*|\uFE30-\uFFA0|\(|\)|\-|\_|\+|\=|\||\\|\[|\]|\{|\}|\;|\:|\"|\'|\,|\<|\.|\>|\/|\?]+/).map(function (i) {
            return i.replace(/[\ |\~|\`|\!|\@|\#|\$|\%|\^|\&|\*|\uFE30-\uFFA0|\(|\)|\-|\_|\+|\=|\||\\|\[|\]|\{|\}|\;|\:|\"|\'|\,|\<|\.|\>|\/|\?]/g, "").toLowerCase()
        });
        return f
    };
    c.Pipeline = function () {
        this._stack = []
    };
    c.Pipeline.registeredFunctions = {};
    c.Pipeline.registerFunction = function (g, f) {
        if (f in this.registeredFunctions) {
            c.utils.warn("Overwriting existing registered function: " + f)
        }
        g.label = f;
        c.Pipeline.registeredFunctions[g.label] = g
    };
    c.Pipeline.warnIfFunctionNotRegistered = function (f) {
        var g = f.label && f.label in this.registeredFunctions;
        if (!g) {
            c.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n", f)
        }
    };
    c.Pipeline.load = function (g) {
        var f = new c.Pipeline;
        g.forEach(function (i) {
            var h = c.Pipeline.registeredFunctions[i];
            if (h) {
                f.add(h)
            } else {
                throw new Error("Cannot load un-registered function: " + i)
            }
        });
        return f
    };
    c.Pipeline.prototype.add = function () {
        var f = Array.prototype.slice.call(arguments);
        f.forEach(function (g) {
            c.Pipeline.warnIfFunctionNotRegistered(g);
            this._stack.push(g)
        }, this)
    };
    c.Pipeline.prototype.after = function (f, g) {
        c.Pipeline.warnIfFunctionNotRegistered(g);
        var h = this._stack.indexOf(f) + 1;
        this._stack.splice(h, 0, g)
    };
    c.Pipeline.prototype.before = function (f, g) {
        c.Pipeline.warnIfFunctionNotRegistered(g);
        var h = this._stack.indexOf(f);
        this._stack.splice(h, 0, g)
    };
    c.Pipeline.prototype.remove = function (f) {
        var g = this._stack.indexOf(f);
        this._stack.splice(g, 1)
    };
    c.Pipeline.prototype.run = function (l) {
        var g = [], n = l.length, m = this._stack.length;
        for (var k = 0; k < n; k++) {
            var h = l[k];
            for (var f = 0; f < m; f++) {
                h = this._stack[f](h, k, l);
                if (h === void 0) {
                    break
                }
            }
            if (h !== void 0) {
                g.push(h)
            }
        }
        return g
    };
    c.Pipeline.prototype.reset = function () {
        this._stack = []
    };
    c.Pipeline.prototype.toJSON = function () {
        return this._stack.map(function (f) {
            c.Pipeline.warnIfFunctionNotRegistered(f);
            return f.label
        })
    };
    c.Vector = function () {
        this._magnitude = null;
        this.list = undefined;
        this.length = 0
    };
    c.Vector.Node = function (f, h, g) {
        this.idx = f;
        this.val = h;
        this.next = g
    };
    c.Vector.prototype.insert = function (f, j) {
        var i = this.list;
        if (!i) {
            this.list = new c.Vector.Node(f, j, i);
            return this.length++
        }
        var h = i, g = i.next;
        while (g != undefined) {
            if (f < g.idx) {
                h.next = new c.Vector.Node(f, j, g);
                return this.length++
            }
            h = g, g = g.next
        }
        h.next = new c.Vector.Node(f, j, g);
        return this.length++
    };
    c.Vector.prototype.magnitude = function () {
        if (this._magniture) {
            return this._magnitude
        }
        var g = this.list, f = 0, h;
        while (g) {
            h = g.val;
            f += h * h;
            g = g.next
        }
        return this._magnitude = Math.sqrt(f)
    };
    c.Vector.prototype.dot = function (i) {
        var h = this.list, g = i.list, f = 0;
        while (h && g) {
            if (h.idx < g.idx) {
                h = h.next
            } else {
                if (h.idx > g.idx) {
                    g = g.next
                } else {
                    f += h.val * g.val;
                    h = h.next;
                    g = g.next
                }
            }
        }
        return f
    };
    c.Vector.prototype.similarity = function (f) {
        return this.dot(f) / (this.magnitude() * f.magnitude())
    };
    c.SortedSet = function () {
        this.length = 0;
        this.elements = []
    };
    c.SortedSet.load = function (f) {
        var g = new this;
        g.elements = f;
        g.length = f.length;
        return g
    };
    c.SortedSet.prototype.add = function () {
        Array.prototype.slice.call(arguments).forEach(function (f) {
            if (~this.indexOf(f)) {
                return
            }
            this.elements.splice(this.locationFor(f), 0, f)
        }, this);
        this.length = this.elements.length
    };
    c.SortedSet.prototype.toArray = function () {
        return this.elements.slice()
    };
    c.SortedSet.prototype.map = function (g, f) {
        return this.elements.map(g, f)
    };
    c.SortedSet.prototype.forEach = function (g, f) {
        return this.elements.forEach(g, f)
    };
    c.SortedSet.prototype.indexOf = function (j, k, h) {
        var k = k || 0, h = h || this.elements.length, g = h - k, f = k + Math.floor(g / 2), i = this.elements[f];
        if (g <= 1) {
            if (i === j) {
                return f
            } else {
                return -1
            }
        }
        if (i < j) {
            return this.indexOf(j, f, h)
        }
        if (i > j) {
            return this.indexOf(j, k, f)
        }
        if (i === j) {
            return f
        }
    };
    c.SortedSet.prototype.locationFor = function (j, k, h) {
        var k = k || 0, h = h || this.elements.length, g = h - k, f = k + Math.floor(g / 2), i = this.elements[f];
        if (g <= 1) {
            if (i > j) {
                return f
            }
            if (i < j) {
                return f + 1
            }
        }
        if (i < j) {
            return this.locationFor(j, f, h)
        }
        if (i > j) {
            return this.locationFor(j, k, f)
        }
    };
    c.SortedSet.prototype.intersect = function (l) {
        var o = new c.SortedSet, m = 0, k = 0, g = this.length, n = l.length, h = this.elements, f = l.elements;
        while (true) {
            if (m > g - 1 || k > n - 1) {
                break
            }
            if (h[m] === f[k]) {
                o.add(h[m]);
                m++, k++;
                continue
            }
            if (h[m] < f[k]) {
                m++;
                continue
            }
            if (h[m] > f[k]) {
                k++;
                continue
            }
        }
        return o
    };
    c.SortedSet.prototype.clone = function () {
        var f = new c.SortedSet;
        f.elements = this.toArray();
        f.length = f.elements.length;
        return f
    };
    c.SortedSet.prototype.union = function (f) {
        var g, i, h;
        if (this.length >= f.length) {
            g = this, i = f
        } else {
            g = f, i = this
        }
        h = g.clone();
        h.add.apply(h, i.toArray());
        return h
    };
    c.SortedSet.prototype.toJSON = function () {
        return this.toArray()
    };
    c.Index = function () {
        this._fields = [];
        this._ref = "id";
        this.pipeline = new c.Pipeline;
        this.documentStore = new c.Store;
        this.tokenStore = new c.TokenStore;
        this.corpusTokens = new c.SortedSet;
        this.eventEmitter = new c.EventEmitter;
        this._idfCache = {};
        this.on("add", "remove", "update", function () {
            this._idfCache = {}
        }.bind(this))
    };
    c.Index.prototype.on = function () {
        var f = Array.prototype.slice.call(arguments);
        return this.eventEmitter.addListener.apply(this.eventEmitter, f)
    };
    c.Index.prototype.off = function (f, g) {
        return this.eventEmitter.removeListener(f, g)
    };
    c.Index.load = function (g) {
        if (g.version !== c.version) {
            c.utils.warn("version mismatch: current " + c.version + " importing " + g.version)
        }
        var f = new this;
        f._fields = g.fields;
        f._ref = g.ref;
        f.documentStore = c.Store.load(g.documentStore);
        f.tokenStore = c.TokenStore.load(g.tokenStore);
        f.corpusTokens = c.SortedSet.load(g.corpusTokens);
        f.pipeline = c.Pipeline.load(g.pipeline);
        return f
    };
    c.Index.prototype.field = function (h, f) {
        var f = f || {}, g = {name: h, boost: f.boost || 1};
        this._fields.push(g);
        return this
    };
    c.Index.prototype.ref = function (f) {
        this._ref = f;
        return this
    };
    c.Index.prototype.add = function (m, l) {
        var f = {}, k = new c.SortedSet, n = m[this._ref], l = l === undefined ? true : l;
        this._fields.forEach(function (o) {
            var i = this.pipeline.run(c.tokenizer(m[o.name]));
            f[o.name] = i;
            c.SortedSet.prototype.add.apply(k, i)
        }, this);
        this.documentStore.set(n, k);
        c.SortedSet.prototype.add.apply(this.corpusTokens, k.toArray());
        for (var h = 0; h < k.length; h++) {
            var g = k.elements[h];
            var j = this._fields.reduce(function (i, p) {
                var q = f[p.name].length;
                if (!q) {
                    return i
                }
                var o = f[p.name].filter(function (r) {
                    return r === g
                }).length;
                return i + o / q * p.boost
            }, 0);
            this.tokenStore.add(g, {ref: n, tf: j})
        }
        if (l) {
            this.eventEmitter.emit("add", m, this)
        }
    };
    c.Index.prototype.remove = function (h, g) {
        var i = h[this._ref], g = g === undefined ? true : g;
        if (!this.documentStore.has(i)) {
            return
        }
        var f = this.documentStore.get(i);
        this.documentStore.remove(i);
        f.forEach(function (j) {
            this.tokenStore.remove(j, i)
        }, this);
        if (g) {
            this.eventEmitter.emit("remove", h, this)
        }
    };
    c.Index.prototype.update = function (g, f) {
        var f = f === undefined ? true : f;
        this.remove(g, false);
        this.add(g, false);
        if (f) {
            this.eventEmitter.emit("update", g, this)
        }
    };
    c.Index.prototype.idf = function (g) {
        var i = "@" + g;
        if (Object.prototype.hasOwnProperty.call(this._idfCache, i)) {
            return this._idfCache[i]
        }
        var f = this.tokenStore.count(g), h = 1;
        if (f > 0) {
            h = 1 + Math.log(this.tokenStore.length / f)
        }
        return this._idfCache[i] = h
    };
    c.Index.prototype.search = function (j) {
        var i = this.pipeline.run(c.tokenizer(j)), k = new c.Vector, f = [], h = this._fields.reduce(function (m, n) {
            return m + n.boost
        }, 0);
        var l = i.some(function (m) {
            return this.tokenStore.has(m)
        }, this);
        if (!l) {
            return []
        }
        i.forEach(function (o, n, q) {
            var p = 1 / q.length * this._fields.length * h, m = this;
            var r = this.tokenStore.expand(o).reduce(function (s, t) {
                var y = m.corpusTokens.indexOf(t), u = m.idf(t), w = 1, x = new c.SortedSet;
                if (t !== o) {
                    var v = Math.max(3, t.length - o.length);
                    w = 1 / Math.log(v)
                }
                if (y > -1) {
                    k.insert(y, p * u * w)
                }
                Object.keys(m.tokenStore.get(t)).forEach(function (z) {
                    x.add(z)
                });
                return s.union(x)
            }, new c.SortedSet);
            f.push(r)
        }, this);
        var g = f.reduce(function (m, n) {
            return m.intersect(n)
        });
        return g.map(function (m) {
            return {ref: m, score: k.similarity(this.documentVector(m))}
        }, this).sort(function (n, m) {
            return m.score - n.score
        })
    };
    c.Index.prototype.documentVector = function (n) {
        var h = this.documentStore.get(n), m = h.length, l = new c.Vector;
        for (var g = 0; g < m; g++) {
            var f = h.elements[g], k = this.tokenStore.get(f)[n].tf, j = this.idf(f);
            l.insert(this.corpusTokens.indexOf(f), k * j)
        }
        return l
    };
    c.Index.prototype.toJSON = function () {
        return {
            version: c.version,
            fields: this._fields,
            ref: this._ref,
            documentStore: this.documentStore.toJSON(),
            tokenStore: this.tokenStore.toJSON(),
            corpusTokens: this.corpusTokens.toJSON(),
            pipeline: this.pipeline.toJSON()
        }
    };
    c.Index.prototype.use = function (g) {
        var f = Array.prototype.slice.call(arguments, 1);
        f.unshift(this);
        g.apply(this, f)
    };
    c.Store = function () {
        this.store = {};
        this.length = 0
    };
    c.Store.load = function (g) {
        var f = new this;
        f.length = g.length;
        f.store = Object.keys(g.store).reduce(function (h, i) {
            h[i] = c.SortedSet.load(g.store[i]);
            return h
        }, {});
        return f
    };
    c.Store.prototype.set = function (g, f) {
        this.store[g] = f;
        this.length = Object.keys(this.store).length
    };
    c.Store.prototype.get = function (f) {
        return this.store[f]
    };
    c.Store.prototype.has = function (f) {
        return f in this.store
    };
    c.Store.prototype.remove = function (f) {
        if (!this.has(f)) {
            return
        }
        delete this.store[f];
        this.length--
    };
    c.Store.prototype.toJSON = function () {
        return {store: this.store, length: this.length}
    };
    c.stemmer = function () {
        var l = {
                ational: "ate",
                tional: "tion",
                enci: "ence",
                anci: "ance",
                izer: "ize",
                bli: "ble",
                alli: "al",
                entli: "ent",
                eli: "e",
                ousli: "ous",
                ization: "ize",
                ation: "ate",
                ator: "ate",
                alism: "al",
                iveness: "ive",
                fulness: "ful",
                ousness: "ous",
                aliti: "al",
                iviti: "ive",
                biliti: "ble",
                logi: "log"
            }, i = {icate: "ic", ative: "", alize: "al", iciti: "ic", ical: "ic", ful: "", ness: ""}, m = "[^aeiou]",
            o = "[aeiouy]", f = m + "[^aeiouy]*", k = o + "[aeiou]*", j = "^(" + f + ")?" + k + f,
            g = "^(" + f + ")?" + k + f + "(" + k + ")?$", h = "^(" + f + ")?" + k + f + k + f, n = "^(" + f + ")?" + o;
        return function (u) {
            var p, x, v, y, s, r, q;
            if (u.length < 3) {
                return u
            }
            v = u.substr(0, 1);
            if (v == "y") {
                u = v.toUpperCase() + u.substr(1)
            }
            y = /^(.+?)(ss|i)es$/;
            s = /^(.+?)([^s])s$/;
            if (y.test(u)) {
                u = u.replace(y, "$1$2")
            } else {
                if (s.test(u)) {
                    u = u.replace(s, "$1$2")
                }
            }
            y = /^(.+?)eed$/;
            s = /^(.+?)(ed|ing)$/;
            if (y.test(u)) {
                var t = y.exec(u);
                y = new RegExp(j);
                if (y.test(t[1])) {
                    y = /.$/;
                    u = u.replace(y, "")
                }
            } else {
                if (s.test(u)) {
                    var t = s.exec(u);
                    p = t[1];
                    s = new RegExp(n);
                    if (s.test(p)) {
                        u = p;
                        s = /(at|bl|iz)$/;
                        r = new RegExp("([^aeiouylsz])\\1$");
                        q = new RegExp("^" + f + o + "[^aeiouwxy]$");
                        if (s.test(u)) {
                            u = u + "e"
                        } else {
                            if (r.test(u)) {
                                y = /.$/;
                                u = u.replace(y, "")
                            } else {
                                if (q.test(u)) {
                                    u = u + "e"
                                }
                            }
                        }
                    }
                }
            }
            y = /^(.+?[^aeiou])y$/;
            if (y.test(u)) {
                var t = y.exec(u);
                p = t[1];
                u = p + "i"
            }
            y = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;
            if (y.test(u)) {
                var t = y.exec(u);
                p = t[1];
                x = t[2];
                y = new RegExp(j);
                if (y.test(p)) {
                    u = p + l[x]
                }
            }
            y = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;
            if (y.test(u)) {
                var t = y.exec(u);
                p = t[1];
                x = t[2];
                y = new RegExp(j);
                if (y.test(p)) {
                    u = p + i[x]
                }
            }
            y = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;
            s = /^(.+?)(s|t)(ion)$/;
            if (y.test(u)) {
                var t = y.exec(u);
                p = t[1];
                y = new RegExp(h);
                if (y.test(p)) {
                    u = p
                }
            } else {
                if (s.test(u)) {
                    var t = s.exec(u);
                    p = t[1] + t[2];
                    s = new RegExp(h);
                    if (s.test(p)) {
                        u = p
                    }
                }
            }
            y = /^(.+?)e$/;
            if (y.test(u)) {
                var t = y.exec(u);
                p = t[1];
                y = new RegExp(h);
                s = new RegExp(g);
                r = new RegExp("^" + f + o + "[^aeiouwxy]$");
                if (y.test(p) || s.test(p) && !r.test(p)) {
                    u = p
                }
            }
            y = /ll$/;
            s = new RegExp(h);
            if (y.test(u) && s.test(u)) {
                y = /.$/;
                u = u.replace(y, "")
            }
            if (v == "y") {
                u = v.toLowerCase() + u.substr(1)
            }
            return u
        }
    }();
    c.Pipeline.registerFunction(c.stemmer, "stemmer");
    c.stopWordFilter = function (f) {
        if (c.stopWordFilter.stopWords.indexOf(f) === -1) {
            return f
        }
    };
    c.stopWordFilter.stopWords = new c.SortedSet;
    c.stopWordFilter.stopWords.length = 119;
    c.stopWordFilter.stopWords.elements = ["", "a", "able", "about", "across", "after", "all", "almost", "also", "am", "among", "an", "and", "any", "are", "as", "at", "be", "because", "been", "but", "by", "can", "cannot", "could", "dear", "did", "do", "does", "either", "else", "ever", "every", "for", "from", "get", "got", "had", "has", "have", "he", "her", "hers", "him", "his", "how", "however", "i", "if", "in", "into", "is", "it", "its", "just", "least", "let", "like", "likely", "may", "me", "might", "most", "must", "my", "neither", "no", "nor", "not", "of", "off", "often", "on", "only", "or", "other", "our", "own", "rather", "said", "say", "says", "she", "should", "since", "so", "some", "than", "that", "the", "their", "them", "then", "there", "these", "they", "this", "tis", "to", "too", "twas", "us", "wants", "was", "we", "were", "what", "when", "where", "which", "while", "who", "whom", "why", "will", "with", "would", "yet", "you", "your"];
    c.Pipeline.registerFunction(c.stopWordFilter, "stopWordFilter");
    c.trimmer = function (f) {
        if (e(f)) {
            return f
        }
        return f.replace(/^\W+/, "").replace(/\W+$/, "")
    };

    function e(g) {
        var f = /[\u4E00-\u9FA5\uF900-\uFA2D]/;
        return f.test(g)
    }

    c.Pipeline.registerFunction(c.trimmer, "trimmer");
    c.TokenStore = function () {
        this.root = {docs: {}};
        this.length = 0
    };
    c.TokenStore.load = function (g) {
        var f = new this;
        f.root = g.root;
        f.length = g.length;
        return f
    };
    c.TokenStore.prototype.add = function (h, j, f) {
        var f = f || this.root, g = h[0], i = h.slice(1);
        if (!(g in f)) {
            f[g] = {docs: {}}
        }
        if (i.length === 0) {
            f[g].docs[j.ref] = j;
            this.length += 1;
            return
        } else {
            return this.add(i, j, f[g])
        }
    };
    c.TokenStore.prototype.has = function (g) {
        if (!g) {
            return false
        }
        var h = this.root;
        for (var f = 0; f < g.length; f++) {
            if (!h[g[f]]) {
                return false
            }
            h = h[g[f]]
        }
        return true
    };
    c.TokenStore.prototype.getNode = function (g) {
        if (!g) {
            return {}
        }
        var h = this.root;
        for (var f = 0; f < g.length; f++) {
            if (!h[g[f]]) {
                return {}
            }
            h = h[g[f]]
        }
        return h
    };
    c.TokenStore.prototype.get = function (g, f) {
        return this.getNode(g, f).docs || {}
    };
    c.TokenStore.prototype.count = function (g, f) {
        return Object.keys(this.get(g, f)).length
    };
    c.TokenStore.prototype.remove = function (g, j) {
        if (!g) {
            return
        }
        var h = this.root;
        for (var f = 0; f < g.length; f++) {
            if (!(g[f] in h)) {
                return
            }
            h = h[g[f]]
        }
        delete h.docs[j]
    };
    c.TokenStore.prototype.expand = function (h, g) {
        var f = this.getNode(h), i = f.docs || {}, g = g || [];
        if (Object.keys(i).length) {
            g.push(h)
        }
        Object.keys(f).forEach(function (j) {
            if (j === "docs") {
                return
            }
            g.concat(this.expand(h + j, g))
        }, this);
        return g
    };
    c.TokenStore.prototype.toJSON = function () {
        return {root: this.root, length: this.length}
    };
    d.fn.ghostHunter = function (f) {
        var g = d.extend({}, d.fn.ghostHunter.defaults, f);
        if (g.results) {
            b.init(this, g);
            return b
        }
    };
    d.fn.ghostHunter.defaults = {
        resultsData: false,
        onPageLoad: false,
        onKeyUp: false,
        result_template: "<a href='{{link}}'><p><h2>{{title}}</h2><h4>{{prettyPubDate}}</h4></p></a>",
        info_template: "<p>Number of posts found: {{amount}}</p>",
        displaySearchInfo: true,
        zeroResultsInfo: true,
        before: false,
        onComplete: false,
        includepages: false,
        filterfields: false,
        infoMaxLength: 120
    };
    var a = function (g) {
        var h = new Date(g);
        var f = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        return h.getDate() + " " + f[h.getMonth()] + " " + h.getFullYear()
    };
    var b = {
        isInit: false, init: function (h, g) {
            var f = this;
            this.target = h;
            this.results = g.results;
            this.blogData = {};
            this.result_template = g.result_template;
            this.info_template = g.info_template;
            this.zeroResultsInfo = g.zeroResultsInfo;
            this.displaySearchInfo = g.displaySearchInfo;
            this.before = g.before;
            this.onComplete = g.onComplete;
            this.includepages = g.includepages;
            this.filterfields = g.filterfields;
            this.infoMaxLength = g.infoMaxLength;
            this.index = c(function () {
                this.field("title", {boost: 10});
                this.field("description");
                this.field("link");
                this.field("markdown", {boost: 5});
                this.field("pubDate");
                this.field("tag");
                this.ref("id")
            });
            if (g.onPageLoad) {
                f.loadAPI()
            } else {
                h.focus(function () {
                    f.loadAPI()
                })
            }
            h.closest("form").submit(function (i) {
                i.preventDefault();
                f.find(h.val())
            });
            if (g.onKeyUp) {
                h.keyup(function () {
                    f.find(h.val())
                })
            }
        }, loadAPI: function () {
            if (this.isInit) {
                return false
            }
            var g = this.index, f = this.blogData;
            maxLength = this.infoMaxLength;
            obj = {limit: "all", include: "tags"};
            if (this.includepages) {
                obj.filter = "(page:true,page:false)"
            }
            d.get(ghost.url.api("posts", obj)).done(function (h) {
                searchData = h.posts;
                searchData.forEach(function (i) {
                    var j = i.tags.map(function (m) {
                        return m.name
                    });
                    if (i.meta_description == null) {
                        i.meta_description = ""
                    }
                    var k = j.join(", ");
                    if (k.length < 1) {
                        k = "undefined"
                    }
                    var l = {
                        id: String(i.id),
                        title: String(i.title),
                        markdown: String(i.markdown),
                        pubDate: String(i.created_at.split("T")[0]),
                        tag: k,
                        link: String(i.url),
                        description: String(i.markdown.substr(0, maxLength))
                    };
                    g.add(l);
                    f[i.id] = l
                })
            });
            this.isInit = true
        }, find: function (l) {
            var f = this.index.search(l);
            var k = d(this.results);
            var h = [];
            k.empty();
            if (this.before) {
                this.before()
            }
            if (this.zeroResultsInfo || f.length > 0) {
                if (this.displaySearchInfo) {
                    k.append(this.format(this.info_template, {amount: f.length}))
                }
            }
            for (var j = 0; j < f.length; j++) {
                var m = f[j].ref;
                var g = this.blogData[m];
                k.append(this.format(this.result_template, g));
                h.push(g)
            }
            if (this.onComplete) {
                this.onComplete(h)
            }
        }, clear: function () {
            d(this.results).empty();
            this.target.val("")
        }, format: function (f, g) {
            return f.replace(/{{([^{}]*)}}/g, function (i, h) {
                var j = g[h];
                return typeof j === "string" || typeof j === "number" ? j : i
            })
        }
    }
})(jQuery);
